@inherits BaseCascadingState<UserResponse, RegisterRequest, string, RegisterRequest>

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    public override string BaseUrl => "api/users";

    public UserResponse? GetByIdQuery(string id)
    {
        return Data.FirstOrDefault(u => u.Id == id);
    }

    public override async Task Create(RegisterRequest item)
    {
        IsLoading = true;
        var result = await Http.PostAsJsonAsync(BaseUrl, item)
            .EnsureSuccess<string>();
        if (!result.Success)
        {
            await SetError(result.Message, result.Errors, result.StatusCode);
            IsLoading = false;
        }
    }

    public async Task UpdateChurch(string id, UpdateUserChurchRequest request)
    {
        var result = await Http
            .PutAsJsonAsync($"api/users/{id}/church", request)
            .EnsureSuccess<UserResponse>();

        if (!result.Success)
        {
            await SetError(result.Message, result.Errors, result.StatusCode);
            return;
        }

        await ForceFetch();
    }

    public async Task UpdateRoles(string id, UpdateUserRoleRequest request)
    {
        var result = await Http.PutAsJsonAsync($"api/users/{id}/roles", request)
            .EnsureSuccess<UserResponse>();

        if (!result.Success)
        {
            await SetError(result.Message, result.Errors, result.StatusCode);
            return;
        }

        await ForceFetch();
    }

    public async Task UpdateActiveState(string id, UpdateUserActiveStateRequest request)
    {
        var result = await Http.PutAsJsonAsync($"api/users/{id}/active", request)
            .EnsureSuccess<UserResponse>();

        if (!result.Success)
        {
            await SetError(result.Message, result.Errors, result.StatusCode);
            return;
        }

        await ForceFetch();
    }

}