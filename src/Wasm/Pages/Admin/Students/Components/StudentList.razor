<MudPaper Width="400px" Height="100%" MinHeight="0" Class="tw-overflow-auto tw-pt-2">
    <MudTextField TextChanged="@OnSearchChanged"
                  Text="@SearchText"
                  T="string"
                  Label="Search"
                  Variant="Variant.Outlined"
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Filled.Search"
                  AdornmentColor="Color.Default"
                  Clearable="true"
                  Immediate="true"
                  Margin="Margin.Dense"
                  Class="tw-mx-2"/>
    <MudList Clickable="true" Class="tw-min-h-0">
        @foreach (var student in Students)
        {
            <MudListItem Text="@($"{student.FirstName} {student.LastName}")" />
        }
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
        <MudDivider />
        <MudListItem Text="Trash" />
        <MudListItem Text="Spam" />
    </MudList>
</MudPaper>

@code {

    [Parameter]
    [EditorRequired]
    public List<StudentResponse> Students { get; set; } = null!;

    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    string SearchText { get; set; } = string.Empty;

    private Task OnSearchChanged(string value)
    {
        SearchText = value;
        return OnSearch.InvokeAsync(value);
    }

}