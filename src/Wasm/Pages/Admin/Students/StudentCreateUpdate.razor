@page "/admin/students/create"
@page "/admin/students/{Id:int}/edit"
@attribute [Authorize(Policy = Policies.RequireAdminsAndTeachers)]

@inject IStudentStore StudentStore
@inject IGenerationStore GenerationStore
@inject IChurchStore ChurchStore
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Students Form - GBS</PageTitle>

@if (!UiState.IsPageLoading)
{
    <EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudGrid Justify="Justify.Center" Class="tw-py-8">
            <MudItem xs="12" sm="8" md="5">
                <MatFormCard Label="Student"
                             IsEdit="false"
                             IsLoading="StudentStore.IsLoading"
                             IsProcessing="@_isProcessing"
                             ReturnUrl="/admin/students">
                    <MudTextField Label="First Name"
                                  @bind-Value="_model.FirstName"
                                  For="() => _model.FirstName"
                                  OnlyValidateIfDirty="true" />
                    <MudTextField Label="Last Name"
                                  @bind-Value="_model.LastName"
                                  For="() => _model.LastName" />
                    <MudDatePicker Label="Date of Birth"
                                   @bind-Date="_model.DateOfBirth"
                                   For="() => _model.DateOfBirth" />
                    <MudTextField Label="Email"
                                  @bind-Value="_model.Email"
                                  For="() => _model.Email" />
                    <MudTextField Label="Phone"
                                  @bind-Value="_model.Phone"
                                  For="() => _model.Phone" />
                    <MudField Label="Marital status" Variant="Variant.Text" InnerPadding="false">
                        <MudRadioGroup T="MaritalStatus" @bind-SelectedOption="@_model.MaritalStatus">
                            @foreach (var maritalStatus in Enum.GetValues(typeof(MaritalStatus)).Cast<MaritalStatus>())
                            {
                                <MudRadio T="MaritalStatus" Option="@maritalStatus">@maritalStatus.ToString()</MudRadio>
                            }
                        </MudRadioGroup>
                    </MudField>
                    <MudTextField Label="Address"
                                  @bind-Value="_model.Address"
                                  For="() => _model.Address" />
                    <MudTextField Label="City"
                                  @bind-Value="_model.City"
                                  For="() => _model.City" />
                    <MudTextField Label="Province/State"
                                  @bind-Value="_model.State"
                                  For="() => _model.State" />
                    <MudTextField Label="Country"
                                  @bind-Value="_model.Country"
                                  For="() => _model.Country" />
                    <MudTextField Label="Postal Code"
                                  @bind-Value="_model.PostalCode"
                                  For="() => _model.PostalCode" />
                    <MudSelect Label="Generation"
                               AnchorOrigin="Origin.BottomCenter"
                               For="@(() => _model.GenerationId)"
                               @bind-Value="_model.GenerationId">
                        <MudSelectItem Disabled="true" T="int" Value="0">Select Generation</MudSelectItem>
                        @foreach (var item in GenerationStore.Data)
                        {
                            <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                    @if (_isAdmin)
                    {
                        <MudSelect Label="Church"
                                   AnchorOrigin="Origin.BottomCenter"
                                   For="@(() => _model.ChurchId)"
                                   @bind-Value="_model.ChurchId">
                            <MudSelectItem Disabled="true" T="int" Value="0">Select Church</MudSelectItem>
                            @foreach (var item in ChurchStore.Data)
                            {
                                <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                    }

                    <MudTextField T="string" Label="Testimony" Variant="Variant.Text" @bind-Value="_model.Testimony" Lines="5" />

                    <MudField Label="Status" Variant="Variant.Text" InnerPadding="false">
                        <MudRadioGroup T="EnrollmentState" @bind-SelectedOption="@_model.Status">
                            @foreach (var status in Enum.GetValues(typeof(EnrollmentState)).Cast<EnrollmentState>())
                            {
                                <MudRadio T="EnrollmentState" Option="@status">@status.ToString()</MudRadio>
                            }
                        </MudRadioGroup>
                    </MudField>

                    <MudCheckBox @bind-Checked="@_model.AgreedToGbsConcept" Label="Agree to GBS Concept" Color="Color.Primary"></MudCheckBox>

                </MatFormCard>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    StudentCreateDto _model = new();
    bool _isProcessing;
    bool _isAdmin;
    bool _isEdit;

    [CascadingParameter]
    CascadingUiState UiState { get; set; } = null!;

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var tasks = new[]
        {
            GenerationStore.Fetch(),
            ChurchStore.Fetch(),
        };
        _isAdmin = await AuthService.UserIsAdmin();
        
        await Task.WhenAll(tasks);

        if (Id.HasValue)
        {
            _isEdit = true;
            var student = await StudentStore.GetById(Id.Value);
            if (student == null)
            {
                NavigationManager.NavigateTo("/admin/students");
                return;
            }
            
            _model = new StudentCreateDto
            {
                FirstName = student.FirstName,
                LastName = student.LastName,
                DateOfBirth = student.DateOfBirth,
                MaritalStatus = student.MaritalStatus,
                Address = student.Address,
                City = student.City,
                State = student.State,
                Country = student.Country,
                PostalCode = student.PostalCode,
                Email = student.Email,
                Phone = student.Phone,
                ChurchId = student.ChurchId
            };
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        UiState.IsPageLoading = StudentStore.IsLoading;
    }

    async Task HandleValidSubmit()
    {
        _isProcessing = true;
        if (_isEdit && Id.HasValue)
        {
            await StudentStore.Update(Id.Value, _model);
        }
        else
        {
            await StudentStore.Add(_model);
        }
        _isProcessing = false;

        if (!StudentStore.HasError)
        {
            NavigationManager.NavigateTo("admin/students");
        }
        else
        {
            StudentStore.ClearErrors();
        }
    }

}