@page "/admin/students"
@using Gbs.Wasm.Pages.Admin.Students.Components
@attribute [Authorize(Policy = Policies.RequireAdminsAndTeachers)]

@inject IAuthService AuthService

<PageTitle>Students - GBS</PageTitle>

<div class="tw-py-4">
    <MudText Typo="Typo.h4">Students</MudText>
    @if (!_userIsAdmin && StudentState.Data.Count > 0)
    {
        <MudText Typo="Typo.subtitle1">@StudentState.Data.FirstOrDefault()?.ChurchName</MudText>
    }
    <div class="tw-flex tw-justify-between tw-pt-4">
        <MudButton StartIcon="@Icons.Filled.Add"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   Href="/admin/students/create">
            New
        </MudButton>
    </div>
</div>

@if (_userIsAdmin)
{
    <div class="tw-flex">
        <MudSelect Label="Price"
                   T="int"
                   Variant="Variant.Outlined"
                   @bind-Value="SelectedChurch"
                   AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem T="int" Value="@int.Parse("0")">All</MudSelectItem>
            @foreach (var church in ChurchState.Data)
            {
                <MudSelectItem T="int" Value="@church.Id">@church.Name</MudSelectItem>
            }
        </MudSelect>
    </div>
}

<div class="tw-flex-1 tw-flex tw-w-full tw-min-h-0">
    <MudPaper Width="400px" Height="100%" MinHeight="0" Class="tw-overflow-auto">
        <MudTextField @bind-Value="@SearchText"
                      Label="Search"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search"
                      AdornmentColor="Color.Default"
                      Clearable="true"
                      Class="tw-mx-2" />
        <MudList Clickable="true" Class="tw-min-h-0">
            @foreach (var student in Students)
            {
                <MudListItem Text="@($"{student.FirstName} {student.LastName}")" />
            }
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudListItem Text="Sent" Icon="@Icons.Material.Filled.Send" />
            <MudDivider />
            <MudListItem Text="Trash" />
            <MudListItem Text="Spam" />
        </MudList>
    </MudPaper>

    <MudTable Items="@Students"
              Hover="true" Breakpoint="Breakpoint.Sm"
              Loading="@StudentState.IsLoading"
              LoadingProgressColor="Color.Info"
              Class="tw-w-full">
        <HeaderContent>
            <MudTh>Name</MudTh>
            @if (_userIsAdmin)
            {
                <MudTh>Church</MudTh>
            }
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
            @if (_userIsAdmin)
            {
                <MudTd DataLabel="Church">@context.ChurchName</MudTd>
            }
            <MudTd Class="tw-text-end">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Size="Size.Small"
                               Href="@($"admin/students/{context.Id}/edit")" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</div>


@code {

    [CascadingParameter]
    StudentState StudentState { get; set; } = null!;

    [CascadingParameter]
    ChurchState ChurchState { get; set; } = null!;

    bool _userIsAdmin;
    string _searchText = string.Empty;
    int _selectedChurch;

    List<StudentResponse> Students { get; set; } = new();

    int SelectedChurch
    {
        get => _selectedChurch;
        set
        {
            _selectedChurch = value;
            OnFilter(SelectedChurch);
        }
    }

    string SearchText
    {
        get => _searchText;
        set
        {
            _searchText = value;
            if (value == _searchText) return;

            if (_searchText == string.Empty)
            {
                Students = StudentState.Data;
            }
            else
            {
                OnFilter(SelectedChurch);
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var tasks = new[] { StudentState.Fetch(), ChurchState.Fetch() };
        await Task.WhenAll(tasks);
        Students = StudentState.Data;
        _userIsAdmin = await AuthService.UserIsAdmin();
    }

    void OnFilter(int churchId)
    {
        if (churchId == 0)
        {
            Students = StudentState.Data.Where(x => x.FirstName.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
                                                    x.LastName.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            Students = StudentState.Data.Where(x => x.ChurchId == churchId &&
                                                    (x.FirstName.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
                                                     x.LastName.Contains(SearchText, StringComparison.OrdinalIgnoreCase))).ToList();
        }
    }

}