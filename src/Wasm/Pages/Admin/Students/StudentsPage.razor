@page "/admin/students"
@using Gbs.Wasm.Pages.Admin.Students.Components
@attribute [Authorize(Policy = Policies.RequireAdminsAndTeachers)]

@inject IAuthService AuthService

<PageTitle>Students - GBS</PageTitle>

<div class="tw-py-4">
    <MudText Typo="Typo.h4">Students</MudText>
    @if (!_userIsAdmin && StudentState.Data.Count > 0)
    {
        <MudText Typo="Typo.subtitle1">@StudentState.Data.FirstOrDefault()?.ChurchName</MudText>
    }
    <div class="tw-flex tw-justify-between tw-pt-4">
        <MudButton StartIcon="@Icons.Filled.Add"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   Href="/admin/students/create">
            New
        </MudButton>
        <MudIconButton Icon="@Icons.Filled.FilterList"
                       Color="Color.Default"
                       Variant="Variant.Filled"
                       OnClick="() => _showFilter = !_showFilter" />
    </div>
</div>

@if (_userIsAdmin)
{
    <div class="tw-flex">
        <MudTabs Elevation="4"
                 Rounded="true"
                 Color="@Color.Default"
                 @ref="_churchTabs"
                 Class="tw-min-w-0 tw-my-4">
            @foreach (var church in ChurchState.Data)
            {
                <MudTabPanel Text="@church.Name"
                             ID="@church.Name"
                             OnClick="() => SelectedChurch = church.Id" />
            }
        </MudTabs>
    </div>
}

<div class="tw-flex-1 tw-flex tw-w-full tw-min-h-0">
    <StudentList Students="StudentState.Data" />

    <MudTable Items="@FilteredStudents()"
              Hover="true" Breakpoint="Breakpoint.Sm"
              Loading="@StudentState.IsLoading"
              LoadingProgressColor="Color.Info"
              Class="tw-w-full">
        <HeaderContent>
            <MudTh>Name</MudTh>
            @if (_userIsAdmin)
            {
                <MudTh>Church</MudTh>
            }
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
            @if (_userIsAdmin)
            {
                <MudTd DataLabel="Church">@context.ChurchName</MudTd>
            }
            <MudTd Class="tw-text-end">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Size="Size.Small"
                               Href="@($"admin/students/{context.Id}/edit")" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</div>


@code {

    [CascadingParameter]
    StudentState StudentState { get; set; } = null!;

    [CascadingParameter]
    ChurchState ChurchState { get; set; } = null!;

    bool _userIsAdmin;
    bool _showFilter;
    int _selectedChurch;
    private MudTabs _churchTabs = null!;

    private int SelectedChurch
    {
        get => _selectedChurch;
        set
        {
            _selectedChurch = value;
            _churchTabs.ActivatePanel(ChurchState.Data.FirstOrDefault(c => c.Id == value)?.Name ?? string.Empty);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var tasks = new[] { StudentState.Fetch(), ChurchState.Fetch() };
        await Task.WhenAll(tasks);
        _userIsAdmin = await AuthService.UserIsAdmin();
        SelectedChurch = await AuthService.GetUserChurchId();
        StateHasChanged();
    }

    // void OnTabChanged(string churchName)
    // {
    //     _churchTabs.ActivatePanel(churchName);
    //     SelectedChurch = ChurchState.Data.FirstOrDefault(c => c.Name == churchName)?.Id ?? 0;
    // }

    private List<StudentResponse> FilteredStudents()
    {
        return SelectedChurch == 0
            ? StudentState.Data
            : StudentState.Data.Where(x => x.ChurchId == SelectedChurch).ToList();
    }

}