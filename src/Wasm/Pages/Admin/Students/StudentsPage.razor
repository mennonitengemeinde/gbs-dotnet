@page "/admin/students"
@page "/admin/students/{id?}"
@attribute [Authorize(Policy = Policies.RequireAdminsAndTeachers)]
@using Gbs.Wasm.Pages.Admin.Students.Components

@inject IAuthService AuthService

<PageTitle>Students - GBS</PageTitle>

<div class="tw-py-4">
    <MudText Typo="Typo.h4">Students</MudText>
    @if (!_userIsAdmin && StudentState.Data.Count > 0)
    {
        <MudText Typo="Typo.subtitle1">@StudentState.Data.FirstOrDefault()?.ChurchName</MudText>
    }
    <div class="tw-flex tw-justify-between tw-pt-4">
        <MudButton StartIcon="@Icons.Filled.Add"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   Href="/admin/students/create">
            New
        </MudButton>
    </div>
</div>

<AdminChurchFilter @bind-ChurchValue="SelectedChurch" />

<div class="tw-flex-1 tw-flex tw-space-x-4 tw-w-full tw-min-h-0">
    <StudentList Students="@Students" OnSearch="@HandleSearch" />

    @if (Id.HasValue)
    {
        <StudentDetail />
    }
</div>


@code {

    bool _userIsAdmin;
    int _selectedChurch;

    [CascadingParameter]
    StudentState StudentState { get; set; } = null!;

    [Parameter]
    public int? Id { get; set; }

    List<StudentResponse> Students { get; set; } = new();

    int SelectedChurch
    {
        get => _selectedChurch;
        set
        {
            _selectedChurch = value;
            OnFilter(SelectedChurch);
        }
    }

    void HandleSearch(string searchText)
    {
        OnFilter(SelectedChurch, searchText);
    }


    protected override async Task OnInitializedAsync()
    {
        await StudentState.Fetch();
        Students = StudentState.Data;
        _userIsAdmin = await AuthService.UserIsAdmin();
    }

    void OnFilter(int churchId, string searchText = "")
    {
        if (churchId == 0)
        {
            Students = StudentState.Data
                .Where(x => x.FirstName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                            x.LastName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            Students = StudentState.Data
                .Where(x => x.ChurchId == churchId &&
                            (x.FirstName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                             x.LastName.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }
    }

}