@page "/admin/users"
@attribute [Authorize(Policy = Policies.RequireAdmins)]
@using Gbs.Wasm.Services.Api.AuthService
@using Gbs.Wasm.Services.Api.UserService
@implements IDisposable

@inject IAuthService AuthService
@inject IUserService UserService
@inject IChurchStore ChurchStore

<PageTitle>Users - GBS</PageTitle>

<div class="tw-py-4 tw-space-y-4">
    <MudText Typo="Typo.h4">Users</MudText>
</div>

<MudTable Items="@UserService.Users" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Church</MudTh>
        <MudTh>Roles</MudTh>
        <MudTh>Active</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Church">
            <MudSelect T="int?"
                       Value="@context.ChurchId"
                       Label="Church"
                       ValueChanged="@((value) => HandleChurchChange(value, context))">
                @foreach (var church in ChurchStore.Data)
                {
                    <MudSelectItem T="int?" Value="@church.Id">@church.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Roles" Class="tw-flex">
            @if (_users.Count > 0)
            {
                <MudSelect Label="Roles"
                           T="string"
                           MultiSelection="true"
                           SelectedValues="@_users.First(u => u.Id == context.Id).Roles"
                           SelectedValuesChanged="@((value) => HandleRoleChange(value, context))">
                    @foreach (var role in _roles)
                    {
                        <MudSelectItem T="string" Value="@role">@role</MudSelectItem>
                    }
                </MudSelect>
                <MudIconButton Icon="@Icons.Material.Filled.Save"
                               ButtonType="ButtonType.Button"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled="@(!_users.First(u => u.Id == context.Id).RoleChanged)"
                               OnClick="() => SubmitRoleChange(context.Id)">
                </MudIconButton>
            }
        </MudTd>
        <MudTd DataLabel="Active">
            <MudSwitch T="bool"
                       Checked="@context.IsActive"
                       CheckedChanged="@((e) => HandleActiveChange(e, context.Id))" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    bool _loading;
    UserUpdateChurchDto _updateChurchDto = new UserUpdateChurchDto();
    List<LocalUserDto> _users = new List<LocalUserDto>();
    List<string> _roles = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await UserService.GetUsers();
        await ChurchStore.Fetch();
        var roles = await AuthService.FetchRoles();
        _roles = roles.Data.Select(r => r.Name).ToList();
        _users = UserService.Users.Select(u => new LocalUserDto(u)).ToList();

        UserService.UsersChanged += OnUsersChanged;
        ChurchStore.OnChange += StateHasChanged;
        _loading = false;
    }

    private void OnUsersChanged()
    {
        _loading = true;
        _users = UserService.Users.Select(u => new LocalUserDto(u)).ToList();
        StateHasChanged();
        _loading = false;
    }

    async Task HandleActiveChange(bool e, string userId)
    {
        var updateActiveDto = new UserUpdateActiveStateDto { IsActive = e };
        await UserService.UpdateActiveState(userId, updateActiveDto);
    }

    async Task HandleChurchChange(int? value, UserDto user)
    {
        if (value == null)
        {
            return;
        }
        _updateChurchDto.ChurchId = value;
        await UserService.UpdateChurch(user.Id, _updateChurchDto);
    }

    void HandleRoleChange(IEnumerable<string> value, UserDto user)
    {
        var roles = value.ToList();

        var dbUser = UserService.Users.First(u => u.Id == user.Id);
        var localUser = _users.First(u => u.Id == user.Id);
        if (roles.Count == dbUser.Roles.ToList().Count && !roles.Except(dbUser.Roles).Any())
        {
            localUser.RoleChanged = false;
            localUser.Roles = roles;
            return;
        }
        localUser.Roles = roles;
        localUser.RoleChanged = true;
    }

    async Task SubmitRoleChange(string userId)
    {
        _loading = true;
        var updateRoleDto = new UserUpdateRoleDto { Roles = _users.First(u => u.Id == userId).Roles.ToList() };
        await UserService.UpdateRole(userId, updateRoleDto);
        _loading = false;
    }

    public void Dispose()
    {
        UserService.UsersChanged -= OnUsersChanged;
        ChurchStore.OnChange -= StateHasChanged;
    }

    class LocalUserDto : UserDto
    {
        public LocalUserDto(UserDto userDto)
        {
            Id = userDto.Id;
            FirstName = userDto.FirstName;
            LastName = userDto.LastName;
            Email = userDto.Email;
            ChurchId = userDto.ChurchId;
            ChurchName = userDto.ChurchName;
            Roles = userDto.Roles;
            IsActive = userDto.IsActive;
            RoleChanged = false;
        }

        public bool RoleChanged { get; set; }
    }

}