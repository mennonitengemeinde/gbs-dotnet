@using Gbs.Shared.Lessons
@foreach (var lesson in Lessons)
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@lesson.Name</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Href="@($"admin/lessons/{lesson.Id}/edit")"
                               Color="Color.Warning" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText>
                <strong>Teacher:</strong> @lesson.TeacherName
            </MudText>
            @if (lesson.SubjectName != null)
            {
                <MudText>
                    <strong>Subject:</strong> @lesson.SubjectName
                </MudText>
            }
            <MudText>
                <strong>Order:</strong> @lesson.Order
            </MudText>
        </MudCardContent>
        <MudCardActions Class="tw-justify-end">
            <MudIconButton Icon="@Icons.Filled.ArrowDownward"
                           Color="Color.Primary"
                           Disabled="@(lesson == Lessons.Last())"
                           OnClick="() => HandleMoveLessonDown(lesson)" />
            <MudIconButton Icon="@Icons.Filled.ArrowUpward"
                           Color="Color.Primary"
                           Disabled="@(lesson.Order <= 1)"
                           OnClick="() => HandleMoveLessonUp(lesson)" />
        </MudCardActions>
    </MudCard>
}

@code {

    [Parameter, EditorRequired]
    public List<LessonResponse> Lessons { get; set; } = new();

    [Parameter, EditorRequired]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<LessonResponse> MoveLessonDown { get; set; }

    [Parameter]
    public EventCallback<LessonResponse> MoveLessonUp { get; set; }

    private async Task HandleMoveLessonDown(LessonResponse lesson)
    {
        await MoveLessonDown.InvokeAsync(lesson);
    }

    private async Task HandleMoveLessonUp(LessonResponse lesson)
    {
        await MoveLessonUp.InvokeAsync(lesson);
    }

}