@using Gbs.Shared.Lessons
<MudTable Items="@Lessons" Hover="true" Loading="@IsLoading" LoadingProgressColor="Color.Info">
    <ColGroup>
        <col />
        <col />
        <col style="width: 70px;" />
        <col style="width: 90px;" />
        <col style="width: 150px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Subject</MudTh>
        <MudTh>Order</MudTh>
        <MudTh>Visibility</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Name">@context.SubjectName</MudTd>
        <MudTd DataLabel="Order">@context.Order</MudTd>
        <MudTd DataLabel="Visibility">@context.IsVisible</MudTd>
        <MudTd Class="tw-text-end">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                           Size="Size.Small"
                           Color="Color.Primary"
                           Disabled="@(context == Lessons.Last())"
                           OnClick="() => HandleMoveLessonDown(context)" />
            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                           Size="Size.Small"
                           Color="Color.Primary"
                           Disabled="@(context.Order <= 1)"
                           OnClick="() => HandleMoveLessonUp(context)" />
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Size="Size.Small"
                           Href="@($"admin/lessons/{context.Id}/edit")"
                           Color="Color.Warning" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter, EditorRequired]
    public List<LessonResponse> Lessons { get; set; } = new();
    
    [Parameter, EditorRequired]
    public bool IsLoading { get; set; }
    
    [Parameter]
    public EventCallback<LessonResponse> MoveLessonDown { get; set; }
    
    [Parameter]
    public EventCallback<LessonResponse> MoveLessonUp { get; set; }
    
    private async Task HandleMoveLessonDown(LessonResponse lesson)
    {
        await MoveLessonDown.InvokeAsync(lesson);
    }
    
    private async Task HandleMoveLessonUp(LessonResponse lesson)
    {
        await MoveLessonUp.InvokeAsync(lesson);
    }
}