@page "/admin/lessons/create"
@page "/admin/lessons/{Id:int}/edit"
@inherits BaseMatForm
@attribute [Authorize(Policy = Policies.RequireAdminsAndSound)]

<PageTitle>Lessons Form - GBS</PageTitle>

<EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center" Class="tw-pt-8">
        <MudItem xs="12" sm="8" md="5">
            <MatFormCard Label="Lesson"
                         IsEdit="@Id.HasValue"
                         IsLoading="@LessonState.IsLoading"
                         ReturnUrl="/admin/lessons"
                         ValidationErrors="ValidationErrors"
                         IsProcessing="false">
                <MudTextField Label="Name"
                              @bind-Value="_model.Name"
                              For="() => _model.Name"
                              OnlyValidateIfDirty="true" />
                <MudTextField Label="Video Url"
                              @bind-Value="_model.VideoUrl"
                              For="() => _model.VideoUrl"
                              OnlyValidateIfDirty="true" />
                <div class="tw-flex tw-items-center">
                    <MudSelect Label="Generation"
                               AnchorOrigin="Origin.BottomCenter"
                               Disabled="@GenerationState.IsLoading"
                               For="@(() => _model.GenerationId)"
                               @bind-Value="_model.GenerationId">
                        <MudSelectItem Disabled="true" T="int" Value="0">Select Generation</MudSelectItem>
                        @foreach (var item in GenerationState.Data)
                        {
                            <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                    @if (GenerationState.IsLoading)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" Class="tw-ml-4" />
                    }
                </div>
                <div class="tw-flex tw-items-end">
                    <MudSelect Label="Subject"
                               AnchorOrigin="Origin.BottomCenter"
                               Disabled="@GenerationState.IsLoading"
                               For="@(() => _model.SubjectId)"
                               @bind-Value="_model.SubjectId">
                        @* <MudSelectItem Disabled="true" T="int?" Value="0">Select Subject</MudSelectItem> *@
                        @foreach (var item in SubjectState.Data)
                        {
                            <MudSelectItem T="int?" Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                    @if (SubjectState.IsLoading)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" Class="tw-ml-4 tw-mb-1" />
                    }
                </div>
                <div class="tw-flex tw-items-end">
                    <MudSelect Label="Teacher"
                               AnchorOrigin="Origin.BottomCenter"
                               Disabled="@TeacherState.IsLoading"
                               For="@(() => _model.TeacherId)"
                               @bind-Value="_model.TeacherId">
                        <MudSelectItem Disabled="true" T="int" Value="0">Select Teacher</MudSelectItem>
                        @foreach (var item in TeacherState.Data)
                        {
                            <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                    @if (SubjectState.IsLoading)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" Class="tw-ml-4 tw-mb-1" />
                    }
                </div>
                <MudRadioGroup T="Visibility" @bind-SelectedOption="@_model.IsVisible">
                    @foreach (var item in Enum.GetValues(typeof(Visibility)).Cast<Visibility>())
                    {
                        <MudRadio T="Visibility" Color="Color.Primary" Option="@item">@item.ToString()</MudRadio>
                    }
                </MudRadioGroup>
            </MatFormCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    [CascadingParameter]
    public LessonState LessonState { get; set; } = null!;

    [CascadingParameter]
    public GenerationState GenerationState { get; set; } = null!;

    [CascadingParameter]
    public SubjectState SubjectState { get; set; } = null!;

    [CascadingParameter]
    public TeacherState TeacherState { get; set; } = null!;

    private CreateLessonRequest _model = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(SubjectState.Fetch(), SubjectState.Fetch(), SubjectState.Fetch());

        if (Id.HasValue)
        {
            var lesson = await LessonState.GetById(Id.Value);
            if (lesson != null)
                _model = new CreateLessonRequest
                {
                    Name = lesson.Name,
                    VideoUrl = lesson.VideoUrl,
                    IsVisible = lesson.IsVisible,
                    GenerationId = lesson.GenerationId,
                    SubjectId = lesson.SubjectId,
                    TeacherId = lesson.TeacherId
                };
        }
    }

    private async Task HandleValidSubmit()
    {
        IsProcessing = true;
        if (Id.HasValue)
        {
            await LessonState.Update(Id!.Value, _model);
        }
        else
        {
            await LessonState.Create(_model);
        }

        if (HasError(LessonState.Error))
        {
            LessonState.ClearError();
            return;
        }

        NavigationManager.NavigateTo("admin/lessons");
    }

}