@page "/admin/lessons"
@using Gbs.Wasm.Pages.Admin.Lessons.Components
@attribute [Authorize(Policy = Policies.RequireAdminsAndSound)]
@implements IDisposable
@implements INotifyStateChanged<LessonResponse>

@inject ILessonService LessonService

<PageTitle>Lessons - GBS</PageTitle>

<div class="tw-py-4 tw-space-y-4">
    <MudText Typo="Typo.h4">Lessons</MudText>
    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Href="/admin/lessons/create">
        New
    </MudButton>
</div>

<MudHidden Breakpoint="Breakpoint.MdAndUp">
    <div class="tw-space-y-4">
        <MobileLessonList Lessons="LessonService.Data"
                          IsLoading="LessonService.IsLoading"
                          MoveLessonDown="MoveLessonDown"
                          MoveLessonUp="MoveLessonUp" />
    </div>
</MudHidden>

<MudHidden Breakpoint="Breakpoint.SmAndDown">
    <LessonsTable Lessons="@LessonService.Data"
                  IsLoading="@LessonService.IsLoading"
                  MoveLessonDown="MoveLessonDown"
                  MoveLessonUp="MoveLessonUp" />
</MudHidden>

@code {

    protected override async Task OnInitializedAsync()
    {
        LessonService.OnChange += NotifyStateChanged;
        await LessonService.ForceFetch(this);
    }

    private async Task MoveLessonUp(LessonResponse lesson)
    {
        await LessonService.UpdateOrder(this, lesson.Id, lesson.Order - 1);
    }

    private async Task MoveLessonDown(LessonResponse lesson)
    {
        await LessonService.UpdateOrder(this, lesson.Id, lesson.Order + 1);
    }

    public void NotifyStateChanged(ComponentBase sender, List<LessonResponse>? data, bool isLoading, ServiceError? error)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        LessonService.OnChange -= NotifyStateChanged;
    }

}