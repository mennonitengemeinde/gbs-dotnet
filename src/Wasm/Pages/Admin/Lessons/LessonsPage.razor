@page "/admin/lessons"
@attribute [Authorize(Policy = Policies.RequireAdminsAndSound)]
@implements IDisposable

@inject ILessonStore LessonStore

<PageTitle>Lessons - GBS</PageTitle>

<div class="tw-py-4 tw-space-y-4">
    <MudText Typo="Typo.h4">Lessons</MudText>
    <MudButton StartIcon="@Icons.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Href="/admin/lessons/create">
        New
    </MudButton>
</div>

<MudTable Items="@LessonStore.Data" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@LessonStore.IsLoading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Order</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Order">@context.Order</MudTd>
        <MudTd Class="tw-text-end">
            <MudIconButton Icon="@Icons.Filled.ArrowDownward"
                           Size="Size.Small"
                           Color="Color.Primary"
                           Disabled="@(context == LessonStore.Data.Last())"
                           OnClick="() => MoveLessonDown(context)" />
            <MudIconButton Icon="@Icons.Filled.ArrowUpward"
                           Size="Size.Small"
                           Color="Color.Primary"
                           Disabled="@(context.Order <= 1)"
                           OnClick="() => MoveLessonUp(context)" />
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Size="Size.Small"
                           Href="@($"admin/lessons/{context.Id}/edit")"
                           Color="Color.Warning" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    protected override async Task OnInitializedAsync()
    {
        await LessonStore.ForceFetch();
        LessonStore.OnChange += StateHasChanged;
    }

    private async Task MoveLessonUp(LessonDto lesson)
    {
        await LessonStore.UpdateOrder(lesson.Id, lesson.Order - 1);
    }

    private async Task MoveLessonDown(LessonDto lesson)
    {
        await LessonStore.UpdateOrder(lesson.Id, lesson.Order + 1);
    }

    public void Dispose()
    {
        LessonStore.OnChange -= StateHasChanged;
    }

}