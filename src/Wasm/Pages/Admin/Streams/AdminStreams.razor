@page "/admin/streams"
@attribute [Authorize(Policy = Policies.RequireAdminsAndSound)]
@implements IDisposable
@using Gbs.Wasm.Pages.Admin.Streams.Components

@inject IStreamStore StreamStore
@inject IUiService UiService
@inject IDialogService DialogService

<PageTitle>Streams - GBS</PageTitle>

<div class="tw-py-4 tw-space-y-4">
    <MudText Typo="Typo.h4">Streams</MudText>
    <MudButton StartIcon="@Icons.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Href="/admin/streams/create">
        New
    </MudButton>
</div>

<MudGrid Justify="Justify.FlexStart">
    @foreach (var liveStream in StreamStore.Data)
    {
        <MudItem xs="12" sm="6" lg="4" xl="3">
            <AdminStreamCard LiveStream="@liveStream" OnDelete="HandleDelete" />
        </MudItem>
    }
</MudGrid>

@code {

    [CascadingParameter]
    CascadingUiState UiState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await StreamStore.Fetch();
        StreamStore.OnChange += StateHasChanged;
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        UiState.IsPageLoading = StreamStore.IsLoading;
    }

    async Task HandleDelete(StreamDto stream)
    {
        bool? result = await DialogService.ShowMessageBox(
            $"Delete {stream.Title}?",
            "Are you sure you want to continue?",
            yesText: "Delete!", cancelText: "Cancel");
        if (result != null)
        {
            await DeleteStream(stream);
        }
        StateHasChanged();
    }

    async Task DeleteStream(StreamDto stream)
    {
        await StreamStore.Delete(stream.Id);
        if (!StreamStore.HasError)
        {
            UiService.ShowSuccessAlert("Stream deleted successfully");
        }
        else
        {
            StreamStore.ClearErrors();
        }
    }

    public void Dispose()
    {
        StreamStore.OnChange -= StateHasChanged;
    }

}
