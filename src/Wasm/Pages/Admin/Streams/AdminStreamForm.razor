@page "/admin/streams/create"
@page "/admin/streams/{Id:int}/edit"
@inherits BaseMatForm
@attribute [Authorize(Policy = Policies.RequireAdminsAndSound)]

<PageTitle>Streams Form - GBS</PageTitle>

<EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <MudGrid Justify="Justify.Center" Class="tw-pt-8">
        <MudItem xs="12" sm="8" md="5">
            <MatFormCard Label="Stream"
                         IsEdit="@Id.HasValue"
                         IsLoading="@StreamState.IsLoading"
                         IsProcessing="IsProcessing"
                         ValidationErrors="ValidationErrors"
                         ReturnUrl="/admin/streams">
                <MudTextField Label="Title"
                              @bind-Value="_model.Title"
                              For="() => _model.Title" />
                <MudTextField Label="Url"
                              @bind-Value="_model.Url"
                              For="() => _model.Url" />
                <MudSelect Label="Generation"
                           AnchorOrigin="Origin.BottomCenter"
                           For="@(() => _model.GenerationId)"
                           @bind-Value="_model.GenerationId">
                    <MudSelectItem Disabled="true" T="int" Value="0">Select Generation</MudSelectItem>
                    @foreach (var item in GenerationState.Data)
                    {
                        <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Label="Teachers"
                           MultiSelection="true"
                           AnchorOrigin="Origin.BottomCenter"
                           @bind-SelectedValues="_model.Teachers"
                           MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                    @foreach (var item in TeacherState.Data)
                    {
                        <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSwitch Label="Live"
                           Color="Color.Primary"
                           @bind-Checked="_model.IsLive" />
            </MatFormCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    [CascadingParameter]
    GenerationState GenerationState { get; set; } = null!;

    [CascadingParameter]
    TeacherState TeacherState { get; set; } = null!;

    [CascadingParameter]
    StreamState StreamState { get; set; } = null!;

    CreateStreamRequest _model = new();


    protected override async Task OnInitializedAsync()
    {
        var tasks = new[] { TeacherState.Fetch(), GenerationState.Fetch() };
        await Task.WhenAll(tasks);

        if (Id.HasValue)
        {
            var stream = await StreamState.GetById(Id.Value);
            if (stream == null)
            {
                UiService.ShowErrorAlert("Stream not found");
                NavigationManager.NavigateTo("/admin/streams");
                return;
            }

            _model = new CreateStreamRequest
            {
                Title = stream.Title,
                Url = stream.Url,
                IsLive = stream.IsLive,
                GenerationId = stream.GenerationId,
                Teachers = stream.Teachers.Select(t => t.Id).ToHashSet()
            };
        }
    }

    async Task HandleValidSubmit()
    {
        IsProcessing = true;
        if (Id.HasValue)
        {
            await StreamState.Update(Id.Value, _model);
        }
        else
        {
            await StreamState.Create(_model);
        }

        if (HasError(StreamState.Error))
        {
            StreamState.ClearError();
            return;
        }

        NavigationManager.NavigateTo("admin/streams");
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        var nameList = new List<string>();
        foreach (var value in selectedValues)
        {
            int.TryParse(value, out var id);
            nameList.Add(TeacherState.Data.FirstOrDefault(t => t.Id == id)!.Name);
        }
        return string.Join(", ", nameList);
    }

}