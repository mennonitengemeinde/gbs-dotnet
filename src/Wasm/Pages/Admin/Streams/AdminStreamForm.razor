@page "/admin/streams/create"
@page "/admin/streams/{Id:int}/edit"
@attribute [Authorize(Policy = Policies.RequireAdminsAndSound)]
@implements IDisposable

@* @inject IStreamStore StreamStore *@
@* @inject ITeacherStore TeacherStore *@
@* @inject IGenerationStore GenerationStore *@
@inject IUiService UiService
@inject NavigationManager NavigationManager

<PageTitle>Streams Form - GBS</PageTitle>

<EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center" Class="tw-pt-8">
        <MudItem xs="12" sm="8" md="5">
            <MatFormCard Label="Stream"
                         IsEdit="_isEditMode"
                         IsLoading="@StreamState.IsLoading"
                         IsProcessing="_isProcessing"
                         ReturnUrl="/admin/streams">
                <MudTextField Label="Title"
                              @bind-Value="_model.Title"
                              For="() => _model.Title" />
                <MudTextField Label="Url"
                              @bind-Value="_model.Url"
                              For="() => _model.Url" />
                <MudSelect Label="Generation"
                           AnchorOrigin="Origin.BottomCenter"
                           For="@(() => _model.GenerationId)"
                           @bind-Value="_model.GenerationId">
                    <MudSelectItem Disabled="true" T="int" Value="0">Select Generation</MudSelectItem>
                    @foreach (var item in GenerationStore.Data)
                    {
                        <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Label="Teachers"
                           MultiSelection="true"
                           AnchorOrigin="Origin.BottomCenter"
                           @bind-SelectedValues="_model.Teachers"
                           MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                    @foreach (var item in TeacherStore.Data)
                    {
                        <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSwitch Label="Live"
                           Color="Color.Primary"
                           @bind-Checked="_model.IsLive" />
            </MatFormCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    GenerationState GenerationState { get; set; } = null!;

    [CascadingParameter]
    TeacherState TeacherState { get; set; } = null!;

    [CascadingParameter]
    StreamState StreamState { get; set; } = null!;

    IStreamRequest _model = null!;
    bool _isProcessing;
    bool _isEditMode;
    string[]? _errors;


    protected override async Task OnInitializedAsync()
    {
        await TeacherState.Fetch();
        await GenerationState.Fetch();

        if (Id != null)
        {
            _isEditMode = true;
            var stream = await StreamState.GetById(Id.Value);
            if (StreamState.HasError)
            {
                UiService.ShowErrorAlert(StreamState.ErrorMessage);
                StreamState.ClearErrors();
                NavigationManager.NavigateTo("/admin/streams");
                return;
            }
            
            if (stream != null)
            {
                _model = new UpdateStreamRequest
                {
                    Id = stream.Id,
                    Title = stream.Title,
                    Url = stream.Url,
                    IsLive = stream.IsLive,
                    GenerationId = stream.GenerationId,
                    Teachers = stream.Teachers.Select(t => t.Id).ToHashSet()
                };
            }
        }
        else
        {
            _model = new CreateStreamRequest();
        }

    }

    async Task HandleValidSubmit()
    {
        _isProcessing = true;
        if (_isEditMode && _model is UpdateStreamRequest updateRequest)
        {
            await StreamState.Update(Id.Value, updateRequest);
        }
        else if (!_isEditMode && _model is CreateStreamRequest createRequest)
        {
            await StreamState.Add(createRequest);
        }

        if (StreamState.HasError)
        {
            _errors = StreamState.Errors;
            UiService.ShowErrorAlert();
            _isProcessing = false;
            StreamStore.ClearErrors();
        }
        else
        {
            _isProcessing = false;
            UiService.ShowSuccessAlert(_isEditMode ? "Stream updated" : "Stream created");
            NavigationManager.NavigateTo("admin/streams");
        }
        
        
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        var nameList = new List<string>();
        foreach (var value in selectedValues)
        {
            int.TryParse(value, out var id);
            nameList.Add(TeacherStore.Data.FirstOrDefault(t => t.Id == id)!.Name);
        }
        return string.Join(", ", nameList);
    }


    public void Dispose()
    {
        TeacherStore.OnChange -= StateHasChanged;
        GenerationStore.OnChange -= StateHasChanged;
    }

}