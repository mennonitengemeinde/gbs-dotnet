@page "/admin/streams/create"
@page "/admin/streams/{Id:int}/edit"
@attribute [Authorize(Policy = Policies.RequireAdminsAndSound)]
@implements IDisposable

@inject IStreamStore StreamStore
@inject ITeacherStore TeacherStore
@inject IGenerationStore GenerationStore
@inject IUiService UiService
@inject NavigationManager NavigationManager

<PageTitle>Streams Form - GBS</PageTitle>

<EditForm Model="_newStream" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center" Class="tw-pt-8">
        <MudItem xs="12" sm="8" md="5">
            <MatFormCard Label="Stream"
                         IsEdit="_isEditMode"
                         IsLoading="@StreamStore.IsLoading"
                         IsProcessing="_isProcessing"
                         ReturnUrl="/admin/streams">
                <MudTextField Label="Title"
                              @bind-Value="_newStream.Title"
                              For="() => _newStream.Title" />
                <MudTextField Label="Url"
                              @bind-Value="_newStream.Url"
                              For="() => _newStream.Url" />
                <MudSelect Label="Generation"
                           AnchorOrigin="Origin.BottomCenter"
                           For="@(() => _newStream.GenerationId)"
                           @bind-Value="_newStream.GenerationId">
                    <MudSelectItem Disabled="true" T="int" Value="0">Select Generation</MudSelectItem>
                    @foreach (var item in GenerationStore.Data)
                    {
                        <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Label="Teachers"
                           MultiSelection="true"
                           AnchorOrigin="Origin.BottomCenter"
                           @bind-SelectedValues="_newStream.Teachers"
                           MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))">
                    @foreach (var item in TeacherStore.Data)
                    {
                        <MudSelectItem T="int" Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSwitch Label="Live"
                           Color="Color.Primary"
                           @bind-Checked="_newStream.IsLive" />
            </MatFormCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    StreamCreateDto _newStream = new();
    bool _isProcessing;
    bool _isEditMode;

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await TeacherStore.Fetch();
        await GenerationStore.Fetch();
        
        if (Id != null)
        {
            _isEditMode = true;
            var stream = await StreamStore.GetById(Id.Value);
            if (StreamStore.HasError)
            {
                StreamStore.ClearErrors();
                NavigationManager.NavigateTo("/admin/streams");
            }
            else
            {
                if (stream != null)
                {
                    _newStream = new StreamCreateDto
                    {
                        Title = stream.Title,
                        Url = stream.Url,
                        IsLive = stream.IsLive,
                        GenerationId = stream.GenerationId,
                        Teachers = stream.Teachers.Select(t => t.Id).ToHashSet()
                    };
                }
            }
        }
        
        TeacherStore.OnChange += StateHasChanged;
        GenerationStore.OnChange += StateHasChanged;
    }

    async Task HandleValidSubmit()
    {
        _isProcessing = true;
        if (_isEditMode)
        {
            await StreamStore.Update(Id!.Value, _newStream);
        }
        else
        {
            await StreamStore.Add(_newStream);
        }
        
        if (!StreamStore.HasError)
        {
            _isProcessing = false;
            UiService.ShowSuccessAlert(_isEditMode ? "Stream updated" : "Stream created");
            NavigationManager.NavigateTo("admin/streams");
        }
        else
        {
            _isProcessing = false;
            StreamStore.ClearErrors();
        }
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        var nameList = new List<string>();
        foreach (var value in selectedValues)
        {
            int.TryParse(value, out var id);
            nameList.Add(TeacherStore.Data.FirstOrDefault(t => t.Id == id)!.Name);
        }
        return string.Join(", ", nameList);
    }


    public void Dispose()
    {
        TeacherStore.OnChange -= StateHasChanged;
        GenerationStore.OnChange -= StateHasChanged;
    }

}