@inject NavigationManager NavigationManager
@inject IUiService UiService

<EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <MudGrid Justify="Justify.Center" Class="tw-pt-8">
        <MudItem xs="12" sm="8" md="5">
            <MatFormCard Label="Teacher"
                         IsEdit="true"
                         IsLoading="@TeacherState.IsLoading"
                         IsProcessing="@_isProcessing"
                         ValidationErrors="@_validationErrors"
                         ReturnUrl="/admin/teachers">
                <MudTextField Label="Name"
                              @bind-Value="_model.Name"
                              For="() => _model.Name" />
            </MatFormCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    [CascadingParameter]
    public TeacherState TeacherState { get; set; } = null!;

    [Parameter, EditorRequired]
    public int Id { get; set; }


    UpdateTeacherRequest _model = new();
    bool _isProcessing;
    string[]? _validationErrors;


    protected override async Task OnInitializedAsync()
    {
        var teacher = await TeacherState.GetById(Id);
        if (teacher != null)
        {
            _model = new UpdateTeacherRequest
            {
                Id = teacher.Id,
                Name = teacher.Name
            };
        }
    }

    async Task HandleValidSubmit()
    {
        _isProcessing = true;
            await TeacherState.Update(Id, _model);

        if (TeacherState.HasError)
        {
            _isProcessing = false;
            _validationErrors = TeacherState.Errors;
            UiService.ShowErrorAlert(TeacherState.ErrorMessage);
            TeacherState.ClearErrors();
        }
        else
        {
            _isProcessing = false;
            UiService.ShowSuccessAlert("Teacher updated successfully");
            NavigationManager.NavigateTo("admin/teachers");
        }
    }

}