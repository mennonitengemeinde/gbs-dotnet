@page "/admin/generations/create"
@page "/admin/generations/{Id:int}/edit"
@using Gbs.Wasm.Services.Api.GenerationService
@attribute [Authorize(Policy = Policies.RequireAdmins)]
@inject NavigationManager NavigationManager
@inject IGenerationService GenerationService
@inject IUiService UiService

<PageTitle>Generations Form - GBS</PageTitle>

<EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid Justify="Justify.Center" Class="tw-pt-8">
        <MudItem xs="12" sm="8" md="5">
            <MatFormCard Label="Generation"
                         IsEdit="@_isEdit"
                         IsLoading="@_isLoading"
                         IsProcessing="@_isProcessing"
                         ReturnUrl="/admin/generations">
                <MudTextField Label="Name"
                              @bind-Value="_model.Name"
                              For="() => _model.Name"/>
            </MatFormCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    GenerationCreateDto _model = new GenerationCreateDto();
    bool _isEdit;
    bool _isLoading;
    bool _isProcessing;

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            _isEdit = true;
            _isLoading = true;
            var generation = await GenerationService.GetGeneration(Id.Value);
            _model = new GenerationCreateDto
            {
                Name = generation.Data.Name
            };
            _isLoading = false;
        }
    }

    async Task HandleValidSubmit()
    {
        _isProcessing = true;
        var response = _isEdit
            ? await GenerationService.UpdateGeneration(Id!.Value, _model)
            : await GenerationService.AddGeneration(_model);
        if (response.Success)
        {
            _isProcessing = false;
            UiService.ShowSuccessAlert("Generation added successfully");
            NavigationManager.NavigateTo("admin/generations");
        }
        else
        {
            _isProcessing = false;
            await UiService.ShowErrorAlert(response.Message, response.StatusCode);
        }
    }

}