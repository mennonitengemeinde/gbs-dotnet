@page "/admin/generations"
@attribute [Authorize(Policy = Policies.RequireAdmins)]
@implements IDisposable

@inject IStore<GenerationDto, GenerationCreateDto> GenerationStore

<PageTitle>Generations - GBS</PageTitle>

<div class="tw-py-4 tw-space-y-4">
    <MudText Typo="Typo.h4">Generations</MudText>
    <MudButton StartIcon="@Icons.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Href="/admin/generations/create">
        New
    </MudButton>
</div>

<MudTable Items="@GenerationStore.Value" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd Class="tw-text-end">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                           Size="Size.Small" 
                           Href="@($"admin/generations/{context.Id}/edit")"/>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    bool _loading;
    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await GenerationStore.Fetch();
        GenerationStore.OnChange += StateHasChanged;
        _loading = false;
    }

    public void Dispose()
    {
        GenerationStore.OnChange -= StateHasChanged;
    }

}