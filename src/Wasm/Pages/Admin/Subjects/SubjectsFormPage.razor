@page "/admin/subjects/create"
@page "/admin/subjects/{Id:int}/edit"
@inherits BaseMatForm
@attribute [Authorize(Policy = Policies.RequireAdmins)]

@inject ISubjectService SubjectService

<PageTitle>Subjects Form - GBS</PageTitle>

<EditForm Model="_model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center" Class="tw-pt-8">
        <MudItem xs="12" sm="8" md="5">
            <MatFormCard Label="Subject"
                         IsEdit="@Id.HasValue"
                         IsLoading="@SubjectService.IsLoading"
                         IsProcessing="@IsProcessing"
                         ValidationErrors="ValidationErrors"
                         ReturnUrl="/admin/subjects">
                <MudTextField Label="Name"
                              @bind-Value="_model.Name"
                              For="() => _model.Name"
                              OnlyValidateIfDirty="true" />
            </MatFormCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    CreateSubjectRequest _model = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var subject = await SubjectService.GetById(this, Id.Value);
            if (subject != null)
            {
                _model = new CreateSubjectRequest
                {
                    Name = subject.Name
                };
            }
        }
    }

    async Task HandleValidSubmit()
    {
        IsProcessing = true;
        if (Id.HasValue)
        {
            await SubjectService.Update(this, Id.Value, _model);
        }
        else
        {
            await SubjectService.Create(this, _model);
        }

        if (HasError(SubjectService.Error))
        {
            SubjectService.ClearError(this);
            return;
        }

        NavigationManager.NavigateTo("admin/subjects");
    }

}