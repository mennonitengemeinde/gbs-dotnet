@page "/school"
@attribute [Authorize(Policy = Policies.RequireAdminsSoundAndTeachers)]
@using Gbs.Wasm.Pages.School.Components
@implements IAsyncDisposable
@implements INotifyStateChanged<StreamResponse>
@implements INotifyStateChanged<LessonResponse>

@inject NavigationManager NavigationManager
@inject IStreamService StreamService
@inject ILessonService LessonService

<PageTitle>School - GBS</PageTitle>

<WelcomeBanner />

@if (StreamService.Data.Any(s => s.IsLive))
{
    <div class="tw-pt-8 tw-pb-2 tw-text-gray-600">
        <MudText Typo="Typo.h2" Class="tw-text-2xl tw-font-semibold">Live</MudText>
    </div>

    <MudGrid Class="tw-relative tw-pt-2">
        @foreach (var liveStream in StreamService.Data.Where(s => s.IsLive))
        {
            <MudItem xs="12" md="6" xl="4">
                <LiveStreamCard LiveStream="@liveStream" />
            </MudItem>
        }
    </MudGrid>
}

@if (LessonService.Data.Count > 0)
{
    <div class="tw-pt-8 tw-pb-2 tw-text-gray-600">
        <MudText Typo="Typo.h2" Class="tw-text-2xl tw-font-semibold">Lessons</MudText>
    </div>
    
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="md:tw-p-4">
        <MudTabPanel Text="Not Completed">
            <LessonCardList Lessons="LessonService.Data.Where(l => !l.HasWatched).ToList()" />
        </MudTabPanel>
        <MudTabPanel Text="Completed">
            <LessonCardList Lessons="LessonService.Data.Where(l => l.HasWatched).ToList()" />
        </MudTabPanel>
    </MudTabs>
}

@code {

    [CascadingParameter]
    UiState UiState { get; set; } = null!;

    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        StreamService.OnChange += NotifyStateChanged;
        LessonService.OnChange += NotifyStateChanged;
        
        var tasks = new[] { LessonService.ForceFetch(this), StreamService.ForceFetch(this) };

        await Task.WhenAll(tasks);

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/streamshub"))
            .Build();

        _hubConnection.On<Result<List<StreamResponse>>>("ReceiveStreams", OnReceiveStreams);

        await _hubConnection.StartAsync();
    }

    private void OnReceiveStreams(Result<List<StreamResponse>> streams)
    {
        if (!streams.Success) return;

        if (streams.Data != null)
        {
            StreamService.SetState(this, streams.Data, false, null);
        }
    }

    public async ValueTask DisposeAsync()
    {
        StreamService.OnChange -= NotifyStateChanged;
        LessonService.OnChange -= NotifyStateChanged;
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    public void NotifyStateChanged(ComponentBase sender, List<StreamResponse>? data, bool isLoading, ServiceError? error)
    {
        StateHasChanged();
    }

    public void NotifyStateChanged(ComponentBase sender, List<LessonResponse>? data, bool isLoading, ServiceError? error)
    {
        StateHasChanged();
    }

}