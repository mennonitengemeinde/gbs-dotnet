@using System.Timers
@inject IUiService UiService

<div class="alert @_alertBgColor shadow-lg w-full max-w-sm transition-transform ease-in-out @_animateClass">
    <div>
        @switch (AlertDetails.Type)
        {
            case AlertType.Error:
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>
                break;
            case AlertType.Success:
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                break;
            case AlertType.Info:
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current flex-shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                break;
            case AlertType.Warning:
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>
                break;
            default:
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current flex-shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                break;
        }
        <span>@AlertDetails.Message</span>
    </div>
</div>

@code {
    [Parameter]
    public AlertDto AlertDetails { get; set; } = null!;

    string _alertBgColor = string.Empty;
    string _animateClass = "translate-x-full opacity-0";
    Timer? _timer;
    Timer? _killTimer;
    

    protected override void OnInitialized()
    {
        SetAlertBgColor();
        if (AlertDetails.AutoDismiss)
            StartTimer();
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        _animateClass = "delay-100 translate-x-0 opacity-100";
        StateHasChanged();
    }

    void SetAlertBgColor()
    {
        _alertBgColor = AlertDetails.Type switch
        {
            AlertType.Info => "alert-info",
            AlertType.Success => "alert-success",
            AlertType.Warning => "alert-warning",
            AlertType.Error => "alert-error",
            _ => "alert-info"
            };
    }

    void StartTimer()
    {
        _timer = new Timer(AlertDetails.AutoDismissDelay);
        _timer.Elapsed += OnTimedEvent;
        _timer.Enabled = true;
    }

    private void OnTimedEvent(object? source, ElapsedEventArgs e)
    {
        if (_timer != null) _timer.Enabled = false;
        UiService.RemoveAlert(AlertDetails.Id);
        // _killTimer = new Timer(1000);
    }
    
    private void OnKillTimedEvent(object? source, ElapsedEventArgs e)
    {
        Console.WriteLine($"Timer elapsed {AlertDetails.Id}");
        if (_killTimer != null) _killTimer.Enabled = false;
        UiService.RemoveAlert(AlertDetails.Id);
    }

}