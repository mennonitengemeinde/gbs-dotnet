@using System.Linq.Expressions

<div class="form-control w-full max-w-md">
    <label for="@Id" class="label">
        <span class="label-text">@Label</span>
    </label>
    <input @ref="_inputRef" id="@Id" type="@InputType" value="@Value" @oninput="OnInputHandler" class="input input-bordered"/>
    <ValidationMessage For="@For"/>
</div>

@code {
    private ElementReference _inputRef;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string InputType { get; set; } = "text";

    [Parameter]
    public string? ErrorMessage { get; set; }

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<string>>? For { get; set; }


    private async Task OnInputHandler(ChangeEventArgs args)
    {
        var value = args.Value?.ToString() ?? string.Empty;
        await ValueChanged.InvokeAsync(value);
    }

    public async Task FocusAsync()
    {
        await _inputRef.FocusAsync();
    }

}