@typeparam TKey
@typeparam TValue
@using System.Linq.Expressions

<div class="form-control w-full max-w-md">
    @if (Label != null)
    {
        <label class="label">
            <span class="label-text">@Label</span>
        </label>
    }
    <select id="@Id" class="select select-bordered" @onchange="HandleChange">
        @if (Value == null || (Value is string && string.IsNullOrEmpty(Value.ToString())))
        {
            <option value="" selected disabled>Select @Label</option>
        }
        @foreach (var item in Items)
        {
            <option value="@item.Key" selected="@(item.Key?.Equals(Value))">@item.Value</option>
        }
    </select>
    @if (For != null)
    {
        <p>Test</p>
        <ValidationMessage For="@For"/>
    }
</div>

@code {

    [Parameter]
    public string Id { get; set; } = string.Empty;
    
    [Parameter]
    public TKey Value { get; set; }
    
    [Parameter]
    public EventCallback<TKey> ValueChanged { get; set; }
    
    [Parameter]
    public string? Label { get; set; }
    
    [Parameter]
    public Dictionary<TKey, TValue> Items { get; set; }
    
    [Parameter]
    public Expression<Func<TKey>>? For { get; set; }
    
    async Task HandleChange(ChangeEventArgs args)
    {
        if (args.Value is TKey value)
        {
            Value = value;
            await ValueChanged.InvokeAsync(value);
        }
    }
}