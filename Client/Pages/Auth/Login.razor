@page "/login"
@layout AuthLayout
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage

<h1 class="card-title text-3xl">Login</h1>

<AuthTabNav/>

<EditForm Model="_loginDto" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    @if (_message.Length > 0)
        {
            <div class="text-error py-4">
                <span>@_message</span>
            </div>
        }
    
    <TextInput Id="email"
               @ref="_emailInput"
               Label="Email" 
               InputType="email" 
               @bind-Value="_loginDto.Email" 
               For="() => _loginDto.Email"/>
    <TextInput Id="password" 
               Label="Password" 
               InputType="password" 
               @bind-Value="_loginDto.Password" 
               For="() => _loginDto.Password"/>

    <div class="flex justify-end pt-4">
        <Button IsLoading="_loading">Login</Button>
    </div>
    
    
</EditForm>

@code {
    LoginDto _loginDto = new LoginDto();
    private TextInput? _emailInput;
    string _message = string.Empty;
    bool _loading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _emailInput != null)
        {
            await _emailInput.FocusAsync();
        }
    }
    
    private async Task HandleValidSubmit()
    {
        _loading = true;
        var result = await AuthService.Login(_loginDto);
        if (result.Success)
        {
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _loading = false;
            NavigationManager.NavigateTo("school");
        }
        else
        {
            _message = result.Message;
            _loading = false;
        }
    }
}