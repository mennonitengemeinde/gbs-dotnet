@page "/admin/students"
@attribute [Authorize(Policy = Policies.RequireAdminsAndTeachers)]
@implements IDisposable
@inject IStudentService StudentService
@inject IAuthService AuthService

<PageTitle>Students - GBS</PageTitle>

<div class="tw-py-4">
    <MudText Typo="Typo.h4">Students</MudText>
    @if (!_userIsAdmin && StudentService.Students.Count > 0)
    {
        <MudText Typo="Typo.subtitle1">@StudentService.Students.FirstOrDefault()?.ChurchName</MudText>
    }
    <MudButton StartIcon="@Icons.Filled.Add" 
               Color="Color.Primary" 
               Variant="Variant.Filled" 
               Href="/admin/students/create"
               Class="tw-mt-4">
        New
    </MudButton>
</div>

<MudTable Items="@StudentService.Students" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
        @if (_userIsAdmin)
        {
            <MudTh>Church</MudTh>
        }
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        @if (_userIsAdmin)
        {
            <MudTd DataLabel="Church">@context.ChurchName</MudTd>
        }
        <MudTd Class="tw-text-end">
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Size="Size.Small"
                           Href="@($"admin/students/{context.Id}/edit")" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    bool _loading;
    bool _userIsAdmin;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await StudentService.FetchStudents();
        _userIsAdmin = await AuthService.UserIsAdmin();
        StudentService.StudentsChanged += StateHasChanged;
        _loading = false;
    }

    public void Dispose()
    {
        StudentService.StudentsChanged -= StateHasChanged;
    }

}