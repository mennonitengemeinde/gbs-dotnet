@page "/admin/streams/create"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.SuperAdmin}, {Roles.Teacher}")]
@implements IDisposable
@inject IStreamService StreamService
@inject ITeacherService TeacherService
@inject IGenerationService GenerationService
@inject IUiService UiService
@inject NavigationManager NavigationManager

<H3>Create Streams</H3>

<div class="flex justify-center pt-4">
    <div class="card w-96 bg-base-200 shadow-lg">
        <div class="card-body">
            <EditForm Model="_newStream" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator/>
                <TextInput Id="title"
                           @ref="_titleInput"
                           Label="Title"
                           @bind-Value="_newStream.Title"
                           For="() => _newStream.Title"/>
                <TextInput Id="url"
                           Label="Url"
                           @bind-Value="_newStream.Url"
                           For="() => _newStream.Url"/>
                <ToggleInput Id="isLive"
                             Label="Live"
                             @bind-Checked="_newStream.IsLive"/>
                <SelectInput Id="generation"
                             Label="Generation"
                             Placeholder="Select a generation"
                             Items="_generationSelectItems"
                             For="@(() => _newStream.GenerationId)"
                             @bind-Value="_newStream.GenerationId"/>
                <TeacherComboBox @bind-Teachers="SelectedTeachers"
                                 For="() => _newStream.Teachers"/>
                
                <div class="flex justify-end pt-4 space-x-2">
                    <Button Href="admin/teachers">Cancel</Button>
                    <Button Type="submit" Color="BtnColor.Primary" IsLoading="_isLoading">Add</Button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    StreamCreateDto _newStream = new StreamCreateDto();
    TextInput _titleInput = null!;
    bool _isLoading;
    Dictionary<int, string> _generationSelectItems = new Dictionary<int, string>();
    List<Teacher> _selectedTeachers = new List<Teacher>();

    List<Teacher> SelectedTeachers
    {
        get => _selectedTeachers;
        set
        {
            _selectedTeachers = value;
            _newStream.Teachers = value.Select(t => t.Id).ToList();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await GenerationService.LoadGenerations();
        await TeacherService.LoadTeachers();
        TeacherService.TeachersChanged += StateHasChanged;
        GenerationService.GenerationsChanged += StateHasChanged;
        _generationSelectItems = GenerationService.Generations.ToDictionary(g => g.Id, g => g.Name);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _titleInput.FocusAsync();
        }
    }

    async Task HandleValidSubmit()
    {
        _isLoading = true;
        var response = await StreamService.AddLiveStream(_newStream);
        if (response.Success)
        {
            _isLoading = false;
            UiService.AddSuccessAlert("Stream added successfully");
            NavigationManager.NavigateTo("admin/streams");
        }
        else
        {
            _isLoading = false;
            UiService.AddErrorAlert(response.Message);
            await _titleInput.FocusAsync();
        }
    }


    public void Dispose()
    {
        TeacherService.TeachersChanged -= StateHasChanged;
        GenerationService.GenerationsChanged -= StateHasChanged;
    }

}