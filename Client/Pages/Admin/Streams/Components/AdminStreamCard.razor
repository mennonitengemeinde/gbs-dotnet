@inject IUiService UiService
@inject IStreamService StreamService

<div class="card bg-base-200 shadow-lg">
    <div class="card-body">
        <h2 class="font-semibold text-lg truncate">@LiveStream.Title</h2>
        <p class="card-subtitle text-gray-500">@LiveStream.Generation.Name</p>
        <ul>
            @foreach (var teacher in LiveStream.Teachers)
            {
                <li>
                    <i class="oi oi-microphone"></i> @teacher.Name
                </li>
            }
        </ul>
        <div class="card-actions justify-end pt-2">
            <Button Color="BtnColor.Error" @onclick="HandleDelete">
                <i class="oi oi-trash"></i>
            </Button>
            <Button Color="BtnColor.Warning" Href="@($"admin/streams/{LiveStream.Id}/edit")">
                <i class="oi oi-pencil"></i>
            </Button>
            <Button Color="BtnColor.Accent" OnClick="@ToggleLive" Outline="@(!LiveStream.IsLive)">
                @if (LiveStream.IsLive)
                {
                    <span>End Live</span>
                }
                else
                {
                    <span>Start Live</span>
                }
            </Button>
        </div>
    </div>
</div>

@code {

    [Parameter, EditorRequired]
    public StreamGetDto LiveStream { get; set; } = null!;
    
    [Parameter]
    public EventCallback<StreamGetDto> OnDelete { get; set; }

    async Task ToggleLive()
    {
        var result = await StreamService.ToggleLive(LiveStream.Id);
        if (result.Success)
        {
            await StreamService.LoadStreams();
        }
        else
        {
            UiService.ShowErrorAlert(result.Message);
        }
    }

    private async Task HandleDelete()
    {
        await OnDelete.InvokeAsync(LiveStream);
    }

}