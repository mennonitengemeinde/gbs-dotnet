@using System.Linq.Expressions
@inject ITeacherService TeacherService

<div class="form-control w-full max-w-xs">
    <label class="label">
        <span class="label-text">Teachers</span>
    </label>
    <div class="input-group">
        <input type="text"
               @bind="_selectedTeacher"
               list="teacher_elements"
               placeholder="Type here"
               class="input input-bordered w-full max-w-xs"/>
        <Button OnClick="HandleAddTeacher" Color="BtnColor.Secondary">Add</Button>
        <datalist id="teacher_elements">
            @foreach (var teacher in TeacherService.Teachers.Where(teacher => !Teachers.Exists(t => t.Id == teacher.Id)))
            {
                <option value="@teacher.Name"></option>
            }
        </datalist>
    </div>
    @if (For != null)
    {
        <ValidationMessage For="@For"/>
    }
</div>

@foreach (var teacher in Teachers)
{
    <div class="flex items-center space-x-2 py-2">
        <Button Color="BtnColor.Error"
                Shape="BtnShape.Square"
                Outline
                Size="BtnSize.Small"
                OnClick="() => HandleRemoveTeacher(teacher.Id)">
            <i class="oi oi-circle-x text-lg"></i>
        </Button>
        <p>@teacher.Name</p>
    </div>
}

@code {
    string _selectedTeacher = string.Empty;

    [Parameter]
    public List<Teacher> Teachers { get; set; } = null!;

    [Parameter]
    public EventCallback<List<Teacher>> TeachersChanged { get; set; }

    [Parameter]
    public Expression<Func<List<int>>>? For { get; set; }

    async Task HandleAddTeacher()
    {
        var teacher = TeacherService.Teachers.FirstOrDefault(t => t.Name == _selectedTeacher);
        if (teacher == null) return;
        Teachers.Add(teacher);
        _selectedTeacher = string.Empty;
        await TeachersChanged.InvokeAsync(Teachers);
    }

    async Task HandleRemoveTeacher(int teacherId)
    {
        var teacher = Teachers.FirstOrDefault(t => t.Id == teacherId);
        if (teacher == null) return;
        Teachers.Remove(teacher);
        await TeachersChanged.InvokeAsync(Teachers);
    }

}