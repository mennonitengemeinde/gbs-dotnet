@page "/admin/streams/create"
@page "/admin/streams/{Id:int}/edit"
@attribute [Authorize(Roles = $"{Roles.SuperAdmin}, {Roles.Admin}, {Roles.Teacher}, {Roles.Sound}")]
@implements IDisposable
@inject IStreamService StreamService
@inject ITeacherService TeacherService
@inject IGenerationService GenerationService
@inject IUiService UiService
@inject NavigationManager NavigationManager

<EditForm Model="_newStream" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid Justify="Justify.Center" Class="tw-pt-8">
        <MudItem xs="12" sm="8" md="5">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Create Stream</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild" Class="tw-space-y-2">
                        <MudTextField Label="Title"
                                      @bind-Value="_newStream.Title"
                                      For="() => _newStream.Title"/>
                        <MudTextField Label="Url"
                                      @bind-Value="_newStream.Url"
                                      For="() => _newStream.Url"/>
                        <MudSwitch Label="Live"
                                   Color="Color.Primary"
                                   @bind-Checked="_newStream.IsLive"/>
                        <MudSelect Label="Generation"
                                   AnchorOrigin="Origin.BottomCenter"
                                   For="@(() => _newStream.GenerationId)"
                                   @bind-Value="_newStream.GenerationId">
                            @foreach (var item in GenerationService.Generations)
                            {
                                <MudSelectItem T="int?" Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect Label="Teachers"
                                   MultiSelection="true"
                                   AnchorOrigin="Origin.BottomCenter"
                                   @bind-SelectedValues="SelectedTeachers">
                            @foreach (var item in TeacherService.Teachers)
                            {
                                <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudFocusTrap>
                </MudCardContent>
                <MudCardActions Class="tw-flex tw-justify-end tw-space-x-2">
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="admin/streams">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Save"
                               Disabled="@_isProcessing">
                        @if (_isProcessing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        <MudText>Save</MudText>
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    StreamCreateDto _newStream = new StreamCreateDto();
    IEnumerable<Teacher> _selectedTeachers = new List<Teacher>();
    bool _isProcessing;
    bool _isEditMode;

    IEnumerable<Teacher> SelectedTeachers
    {
        get => _selectedTeachers;
        set
        {
            _selectedTeachers = value;
            _newStream.Teachers = value.Select(t => t.Id).ToList();
        }
    }

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            _isEditMode = true;
            var stream = await StreamService.GetStreamById(Id.Value);
            if (!stream.Success)
            {
                await UiService.ShowErrorAlert(stream.Message, stream.StatusCode);
                NavigationManager.NavigateTo("/admin/streams");
            }
            else
            {
                _newStream = new StreamCreateDto
                {
                    Title = stream.Data.Title,
                    Url = stream.Data.Url,
                    IsLive = stream.Data.IsLive,
                    GenerationId = stream.Data.GenerationId,
                    Teachers = stream.Data.Teachers.Select(t => t.Id).ToList()
                };
                _selectedTeachers = stream.Data.Teachers;
            }
        }
        await GenerationService.LoadGenerations();
        await TeacherService.LoadTeachers();
        TeacherService.TeachersChanged += StateHasChanged;
        GenerationService.GenerationsChanged += StateHasChanged;
    }

    async Task HandleValidSubmit()
    {
        _isProcessing = true;
    // if (Id != null)
    // {
        var response = _isEditMode
            ? await StreamService.UpdateStream(Id!.Value, _newStream)
            : await StreamService.AddLiveStream(_newStream);
        if (response.Success)
        {
            _isProcessing = false;
            UiService.ShowSuccessAlert(_isEditMode ? "Stream updated" : "Stream created");
            NavigationManager.NavigateTo("admin/streams");
        }
        else
        {
            _isProcessing = false;
            await UiService.ShowErrorAlert(response.Message, response.StatusCode);
        }
    }


    public void Dispose()
    {
        TeacherService.TeachersChanged -= StateHasChanged;
        GenerationService.GenerationsChanged -= StateHasChanged;
    }

}