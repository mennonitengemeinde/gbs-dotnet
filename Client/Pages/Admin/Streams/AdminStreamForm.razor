@page "/admin/streams/create"
@page "/admin/streams/{Id:int}/edit"
@attribute [Authorize(Roles = $"{Roles.SuperAdmin}, {Roles.Admin}, {Roles.Teacher}, {Roles.Sound}")]
@implements IDisposable
@using gbs.Client.Pages.Admin.Streams.Components
@inject IStreamService StreamService
@inject ITeacherService TeacherService
@inject IGenerationService GenerationService
@inject IUiService UiService
@inject NavigationManager NavigationManager

@* <div class="tw-flex tw-justify-between tw-items-center tw-py-4"> *@
@*     <MudText Typo="Typo.h3">Create Streams</MudText> *@
@* </div> *@

<EditForm Model="_newStream" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid Justify="Justify.Center" Class="tw-pt-8">
        <MudItem xs="12" sm="6" md="4">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Create Stream</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                        <MudTextField Label="Title"
                                      @bind-Value="_newStream.Title"
                                      For="() => _newStream.Title"/>
                        <MudTextField Label="Url"
                                      @bind-Value="_newStream.Url"
                                      For="() => _newStream.Url"/>
                        <MudSwitch Label="Live"
                                   Color="Color.Primary"
                                   @bind-Checked="_newStream.IsLive"/>
                        <MudSelect Label="Generation"
                                   AnchorOrigin="Origin.BottomCenter"
                                   For="@(() => _newStream.GenerationId)"
                                   @bind-Value="_newStream.GenerationId">
                            @foreach (var item in GenerationService.Generations)
                            {
                                <MudSelectItem T="int?" Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect Label="Teachers"
                                   MultiSelection="true"
                                   AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="_newStream.Teachers">
                            @foreach (var item in TeacherService.Teachers)
                            {
                                <MudSelectItem T=int Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudFocusTrap>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
@* <div class="tw-flex tw-justify-center tw-pt-4"> *@

@* <div class="card w-96 bg-base-200 shadow-lg"> *@
@*     <div class="card-body"> *@
@*         <EditForm Model="_newStream" OnValidSubmit="HandleValidSubmit"> *@
@*             <DataAnnotationsValidator/> *@
@*             <TextInput Id="title" *@
@*                        @ref="_titleInput" *@
@*                        Label="Title" *@
@*                        @bind-Value="_newStream.Title" *@
@*                        For="() => _newStream.Title"/> *@
@*             <TextInput Id="url" *@
@*                        Label="Url" *@
@*                        @bind-Value="_newStream.Url" *@
@*                        For="() => _newStream.Url"/> *@
@*             <ToggleInput Id="isLive" *@
@*                          Label="Live" *@
@*                          @bind-Checked="_newStream.IsLive"/> *@
@*             <SelectInput Id="generation" *@
@*                          Label="Generation" *@
@*                          Placeholder="Select a generation" *@
@*                          Items="_generationSelectItems" *@
@*                          For="@(() => _newStream.GenerationId)" *@
@*                          @bind-Value="_newStream.GenerationId"/> *@
@*             <TeacherComboBox @bind-Teachers="SelectedTeachers" *@
@*                              For="() => _newStream.Teachers"/> *@
@* *@
@*             <div class="flex justify-end pt-4 space-x-2"> *@
@*                 <Button Href="admin/streams">Cancel</Button> *@
@*                 <Button Type="submit" Color="BtnColor.Primary" IsLoading="_isLoading">Save</Button> *@
@*             </div> *@
@*         </EditForm> *@
@*     </div> *@
@* </div> *@
@* </div> *@

@code {
    StreamCreateDto _newStream = new StreamCreateDto();
    // TextInput _titleInput = null!;
    // DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;
    bool _isLoading;
    bool _isEditMode;
    string _selectedTeachers { get; set; } = string.Empty;
    // List<Teacher> _selectedTeachers = new List<Teacher>();

    [Parameter]
    public int? Id { get; set; }

    // List<Teacher> SelectedTeachers
    // {
    //     get => _selectedTeachers;
    //     set
    //     {
    //         _selectedTeachers = value;
    //         _newStream.Teachers = value.Select(t => t.Id).ToList();
    //     }
    // }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            _isEditMode = true;
            var stream = await StreamService.GetStreamById(Id.Value);
            if (!stream.Success)
            {
                await UiService.ShowErrorAlert(stream.Message, stream.StatusCode);
                NavigationManager.NavigateTo("/admin/streams");
            }
            else
            {
                _newStream = new StreamCreateDto
                {
                    Title = stream.Data.Title,
                    Url = stream.Data.Url,
                    IsLive = stream.Data.IsLive,
                    GenerationId = stream.Data.GenerationId,
                    Teachers = stream.Data.Teachers.Select(t => t.Id).ToList()
                };
                // _selectedTeachers = stream.Data.Teachers;
            }
        }
        await GenerationService.LoadGenerations();
        await TeacherService.LoadTeachers();
        TeacherService.TeachersChanged += StateHasChanged;
        GenerationService.GenerationsChanged += StateHasChanged;
    // _generationSelectItems = GenerationService.Generations.ToDictionary(g => g.Id, g => g.Name);
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await _titleInput.FocusAsync();
    //     }
    // }

    async Task HandleValidSubmit()
    {
        _isLoading = true;
        if (Id != null)
        {
            var response = _isEditMode
                ? await StreamService.UpdateStream(Id.Value, _newStream)
                : await StreamService.AddLiveStream(_newStream);
            if (response.Success)
            {
                _isLoading = false;
                UiService.ShowSuccessAlert(_isEditMode ? "Stream updated" : "Stream created");
                NavigationManager.NavigateTo("admin/streams");
            }
            else
            {
                _isLoading = false;
                await UiService.ShowErrorAlert(response.Message, response.StatusCode);
    // await _titleInput.FocusAsync();
            }
        }
    }


    public void Dispose()
    {
        TeacherService.TeachersChanged -= StateHasChanged;
        GenerationService.GenerationsChanged -= StateHasChanged;
    }

}